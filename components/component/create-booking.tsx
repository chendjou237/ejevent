/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/asizA8FDyvZ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { useBookingDate } from '@/contexts/BookingDateContext'
import { useCartBookings } from "@/contexts/CartBookingsContext"
import { formatDate } from 'date-fns'
import Image from 'next/image'
import { useParams, useRouter } from 'next/navigation'
import { JSX, SVGProps } from "react"
import { toast } from "sonner"

interface CreateBookingTranslations {
  title: string;
  subtitle: string;
  date: string;
  booking: {
    title: string;
    scheduledDates: string;
    startDate: string;
    endDate: string;
    service: string;
  };
  addToCart: string;
}

interface CreateBookingProps {
  item: {
    id: number;
    name: string;
    description: string;
    type: string;
    price: number | null;
    image: string;
    created_at: Date | null;
    updated_at: Date | null;
    slug: string;
    status: string | null;
    images: string[] | null;
  };
  translations: CreateBookingTranslations;
}

export function CreateBooking({ item, translations }: CreateBookingProps) {
  const { startTime, endTime } = useBookingDate()
  const params = useParams()
  const { cart: cartItems, setCart: setCartItems } = useCartBookings()
 
  const router = useRouter()
  const handleAddToCart = () => {
    try {
      setCartItems([...cartItems, { ...item, start_at: startTime, end_at: endTime, quantity: 1, price: item.price!, image: item.images![0], type: item.type }])
      toast.success('Decoration added to cart')
      router.push('/cart')

    } catch (error) {
      console.error(error)
      toast.error('An error occurred while adding item to cart')
    }
  }

  return (
    <div className="grid gap-8 p-6 sm:p-8 md:p-10 lg:p-12">
      <div className="grid gap-4">
        <h2 className="text-2xl font-bold tracking-tight">{translations.title}</h2>
        <p className="text-muted-foreground">{translations.subtitle}</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2  gap-8">
        <div className="grid gap-4">
          <div className="grid gap-2">
            <Label htmlFor="date">{translations.date}</Label>
            <Calendar
              mode="single"
              className="p-0 [&_td]:w-10 [&_td]:h-10 [&_th]:w-10 [&_[name=day]]:w-10 [&_[name=day]]:h-10 [&>div]:space-x-0 [&>div]:gap-6"
              onSelect={(date: any): void => {
                const dateDisplay = new Date(date).toLocaleDateString()
                document.getElementById("date-display")!.textContent = dateDisplay
              }}
            />
          </div>
        </div>
        <div className="grid gap-4">
          <Card className="opacity-85">
            <CardHeader>
              <CardTitle>{translations.booking.title}</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="flex justify-between space-x-8 flex-row">
                <div className="flex flex-col space-y-4">
                  <div className="flex items-center justify-between">
                    <span>{translations.booking.scheduledDates}</span>
                    <span id="date-display"> {formatDate(Date.now(), 'MM/dd/yyyy')} </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>{translations.booking.startDate}</span>
                    <span id="time-display">{formatDate(startTime ?? new Date(Date.now()), 'MM/dd/yyyy')} </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>{translations.booking.endDate}</span>
                    <span id="time-display">{formatDate(endTime ?? new Date(Date.now()), 'MM/dd/yyyy')}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>{translations.booking.service}</span>
                    <span id="service-display"> {" " + item?.name}</span>
                  </div>
                </div>
                <div className="">
                  <Image src={item?.image ?? './placeholder.jpg'} alt={item?.name ?? 'default'} width={200} height={200} />
                </div>
              </div>
              <Button className="w-full" onClick={handleAddToCart}>
                {translations.addToCart}
              </Button>
            </CardContent>
            <CardFooter className="flex justify-center items-center h-full">
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  )
}

function CalendarDaysIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  )
}
