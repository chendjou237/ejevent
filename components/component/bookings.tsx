/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/OVcsrWelWwQ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Caudex } from 'next/font/google'
import { Archivo } from 'next/font/google'

caudex({
  subsets: ['latin'],
  display: 'swap',
})

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { SetStateAction, useState } from "react"
import { Input } from "@/components/ui/input"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Bookings() {
  const [search, setSearch] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const [bookingsPerPage] = useState(10)
  const bookings = [
    {
      id: 1,
      date: "2023-06-01",
      startTime: "9:00 AM",
      endTime: "5:00 PM",
      client: "Chendjou honore",
      service: "Interior Design",
      status: "Completed",
    },
    {
      id: 2,
      date: "2023-05-15",
      startTime: "10:30 AM",
      endTime: "3:00 PM",
      client: "Jane Smith",
      service: "Landscaping",
      status: "Pending",
    },
    {
      id: 3,
      date: "2023-04-20",
      startTime: "1:00 PM",
      endTime: "6:00 PM",
      client: "Bob Johnson",
      service: "Home Staging",
      status: "Cancelled",
    },
    {
      id: 4,
      date: "2023-03-10",
      startTime: "8:00 AM",
      endTime: "4:30 PM",
      client: "Sarah Lee",
      service: "Interior Design",
      status: "Completed",
    },
    {
      id: 5,
      date: "2023-02-28",
      startTime: "11:00 AM",
      endTime: "2:00 PM",
      client: "Tom Wilson",
      service: "Landscaping",
      status: "Pending",
    },
    {
      id: 6,
      date: "2023-01-05",
      startTime: "9:30 AM",
      endTime: "6:30 PM",
      client: "Emily Davis",
      service: "Home Staging",
      status: "Completed",
    },
    {
      id: 7,
      date: "2022-12-15",
      startTime: "2:00 PM",
      endTime: "8:00 PM",
      client: "Michael Brown",
      service: "Interior Design",
      status: "Cancelled",
    },
    {
      id: 8,
      date: "2022-11-22",
      startTime: "10:00 AM",
      endTime: "4:00 PM",
      client: "Jessica Wilson",
      service: "Landscaping",
      status: "Pending",
    },
    {
      id: 9,
      date: "2022-10-01",
      startTime: "1:30 PM",
      endTime: "5:30 PM",
      client: "David Lee",
      service: "Home Staging",
      status: "Completed",
    },
    {
      id: 10,
      date: "2022-09-18",
      startTime: "8:45 AM",
      endTime: "4:15 PM",
      client: "Olivia Thompson",
      service: "Interior Design",
      status: "Completed",
    },
    {
      id: 11,
      date: "2022-08-05",
      startTime: "11:15 AM",
      endTime: "6:45 PM",
      client: "Christopher Nguyen",
      service: "Landscaping",
      status: "Cancelled",
    },
    {
      id: 12,
      date: "2022-07-25",
      startTime: "9:00 AM",
      endTime: "3:00 PM",
      client: "Sophia Patel",
      service: "Home Staging",
      status: "Pending",
    },
  ]
  const filteredBookings = bookings.filter((booking) => booking.client.toLowerCase().includes(search.toLowerCase()))
  const indexOfLastBooking = currentPage * bookingsPerPage
  const indexOfFirstBooking = indexOfLastBooking - bookingsPerPage
  const currentBookings = filteredBookings.slice(indexOfFirstBooking, indexOfLastBooking)
  const totalPages = Math.ceil(filteredBookings.length / bookingsPerPage)
  const handlePageChange = (pageNumber: SetStateAction<number>) => {
    setCurrentPage(pageNumber)
  }
  const handleSearch = (e: { target: { value: SetStateAction<string> } }) => {
    setSearch(e.target.value)
    setCurrentPage(1)
  }
  const completedBookings = bookings.filter((booking) => booking.status === "Completed")
  const pendingBookings = bookings.filter((booking) => booking.status === "Pending")
  const cancelledBookings = bookings.filter((booking) => booking.status === "Cancelled")
  const totalBookings = bookings.length
  const totalCompletedBookings = completedBookings.length
  const totalPendingBookings = pendingBookings.length
  const totalCancelledBookings = cancelledBookings.length
  const completedBookingsPercentage = ((totalCompletedBookings / totalBookings) * 100).toFixed(2)
  const pendingBookingsPercentage = ((totalPendingBookings / totalBookings) * 100).toFixed(2)
  const cancelledBookingsPercentage = ((totalCancelledBookings / totalBookings) * 100).toFixed(2)
  return (
    <div className="container mx-auto px-4 py-8 sm:px-6 lg:px-8">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">Bookings History</h1>
      </div>
      <div className="mb-6">
        <Input
          type="text"
          placeholder="Search by client name"
          value={search}
          onChange={handleSearch}
          className="w-full max-w-md"
        />
      </div>
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Booking Date</TableHead>
              <TableHead>Start Time</TableHead>
              <TableHead>End Time</TableHead>
              <TableHead>Client Name</TableHead>
              <TableHead>Service</TableHead>
              <TableHead>Status</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {currentBookings.map((booking) => (
              <TableRow key={booking.id}>
                <TableCell>{booking.date}</TableCell>
                <TableCell>{booking.startTime}</TableCell>
                <TableCell>{booking.endTime}</TableCell>
                <TableCell>{booking.client}</TableCell>
                <TableCell>{booking.service}</TableCell>
                <TableCell>
                  <div
                    className={`px-2 py-1 rounded-full text-xs font-medium ${
                      booking.status === "Completed"
                        ? "bg-green-100 text-green-800"
                        : booking.status === "Pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-red-100 text-red-800"
                    }`}
                  >
                    {booking.status}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      <div className="mt-6 flex justify-center">
      
      </div>
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4">Bookings Summary</h2>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="bg-green-100 text-green-800 p-4 rounded-lg">
            <h3 className="text-lg font-bold mb-2">Completed</h3>
            <p className="text-4xl font-bold">{totalCompletedBookings}</p>
            <p className="text-sm text-muted-foreground">({completedBookingsPercentage}% of total)</p>
          </div>
          <div className="bg-yellow-100 text-yellow-800 p-4 rounded-lg">
            <h3 className="text-lg font-bold mb-2">Pending</h3>
            <p className="text-4xl font-bold">{totalPendingBookings}</p>
            <p className="text-sm text-muted-foreground">({pendingBookingsPercentage}% of total)</p>
          </div>
          <div className="bg-red-100 text-red-800 p-4 rounded-lg">
            <h3 className="text-lg font-bold mb-2">Cancelled</h3>
            <p className="text-4xl font-bold">{totalCancelledBookings}</p>
            <p className="text-sm text-muted-foreground">({cancelledBookingsPercentage}% of total)</p>
          </div>
        </div>
        <div className="mt-8">
          <h2 className="text-xl font-bold mb-4">Total Bookings</h2>
          <p className="text-4xl font-bold">{totalBookings}</p>
        </div>
      </div>
    </div>
  )
}
