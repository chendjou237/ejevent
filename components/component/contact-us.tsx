'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/IKD6mPNKFb1
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { JSX, SVGProps, useState } from "react"
import { toast } from "sonner"
import {contact} from "@/lib/config.json"
type Props = {
   title: string
   description: string
   nameLabel: string
   namePlaceholder: string
   emailLabel: string
   emailPlaceholder: string
   phoneLabel: string
   phonePlaceholder: string
   messageLabel: string
   messagePlaceholder: string
   button: string
   whatsappButton: string
   contactInformation: string
   businessHour: string
   businessTime: string
   closedTime: string

}
export function ContactUs({
   title,
   description,
   nameLabel,
   namePlaceholder,
   emailLabel,
   emailPlaceholder,
   phoneLabel,
   phonePlaceholder,
   messageLabel,
   messagePlaceholder,
   button,
   whatsappButton,
   businessHour,
   businessTime,
   closedTime,
   contactInformation
}:Props) {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [message, setMessage] = useState('');
  const [isLoading, setLoading] = useState(false)
  const phoneNumber = '+16476749434'
  const messageWhatsapp = "Hello! I'm reaching out to you. from the website ejevent.co"; // Replace with your predefined message

  const openWhatsApp = () => {
    const url = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(messageWhatsapp)}`;
    window.open(url, '_blank');
  };
  const handleSubmit = async (e: any) => {
    e.preventDefault();
    try {
      setLoading(true)
      const response = await fetch('/api/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, email, message, phone }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(data);
        // Handle successful form submission
      } else {
        // Handle failed form submission
      }
    } catch (error) {
      // Handle error in sending request
    }
    toast.success("email send successfully")
    setMessage("")
    setLoading(false)
  }
  return (
    <section className="w-full py-12 md:py-24 lg:py-32 bg-[#fcf4d7]">
      <div className="container grid gap-12 px-4 md:px-6">
        <div className="flex flex-col items-center justify-center space-y-4 text-center">
          <div className="space-y-2">
            <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">{title}</h2>
            <p className="max-w-[700px] text-gray-500 md:text-xl/relaxed dark:text-gray-400">
            {description}
            </p>
          </div>
        </div>
        <div className="grid gap-12 lg:grid-cols-2 lg:gap-24">
          <div className="space-y-6">
            <form className="space-y-4" onSubmit={handleSubmit}>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">{nameLabel}</Label>
                  <Input id="name" placeholder={namePlaceholder}  value={name} onChange={(e) => setName(e.target.value)} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">{emailLabel}</Label>
                  <Input id="email" type="email" value={email}
        onChange={(e) => setEmail(e.target.value)} placeholder={emailPlaceholder} />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">{phoneLabel}</Label>
                <Input id="phone" placeholder={phonePlaceholder} value={phone}
        onChange={(e) => setPhone(e.target.value)} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="message">{messageLabel}</Label>
                <Textarea id="message" placeholder={messagePlaceholder} value={message}
        onChange={(e) => setMessage(e.target.value)} className="min-h-[100px]" />
              </div>
              <div className="flex flex-col gap-4 md:flex-row">
                <Button type="submit" className="w-full md:w-auto" disabled={isLoading}>
                  {button}
                </Button>
                <Button
                 onClick={openWhatsApp}
                 className="inline-flex h-10 w-full items-center justify-center rounded-md bg-green-500 px-6 text-sm font-medium text-white shadow transition-colors hover:bg-green-600 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-green-600 disabled:pointer-events-none disabled:opacity-50 md:w-auto"
                 >
                  <PhoneIcon className="mr-2 h-5 w-5" />
                  {whatsappButton} WhatsApp
                </Button>
                  </div>
            </form>
          </div>
          <div className="space-y-6">
            <div className="space-y-2">
              <h3 className="text-2xl font-bold">{contactInformation}</h3>
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <LocateIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                  <p className="text-gray-500 dark:text-gray-400">{contact.address}
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  <PhoneIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                  <p className="text-gray-500 dark:text-gray-400">{contact.phone}</p>
                </div>
                <div className="flex items-center gap-2">
                  <MailIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                  <p className="text-gray-500 dark:text-gray-400">{contact.email}</p>
                </div>
              </div>
            </div>
            <div className="space-y-2">
              <h3 className="text-2xl font-bold">{businessHour}</h3>
              <div className="space-y-1">
                <p className="text-gray-500 dark:text-gray-400">{businessTime}</p>
                <p className="text-gray-500 dark:text-gray-400">{closedTime}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

function LocateIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="2" x2="5" y1="12" y2="12" />
      <line x1="19" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="5" />
      <line x1="12" x2="12" y1="19" y2="22" />
      <circle cx="12" cy="12" r="7" />
    </svg>
  )
}


function MailIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="16" x="2" y="4" rx="2" />
      <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
    </svg>
  )
}


function PhoneIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
  )
}
