/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/XJbToYoLOOj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { Pagination } from "@/components/ui/pagination"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { JSX, SetStateAction, SVGProps, useMemo, useState } from "react"


interface User  {
  id: number,
  name: string,
  email: string,
  phone: string,
  bookings: number,
  profilePicture: string,
}
export function Users() {
  const [search, setSearch] = useState("")
  const [sort, setSort] = useState({ key: "name", order: "asc" })
  const [page, setPage] = useState(1)
  const [pageSize, setPageSize] = useState(10)
  const users = useMemo(() => {
    return [
      {
        id: 1,
        name: "chendjou Honore",
        email: "chenhonore@gmail.com",
        phone: "555-1234",
        bookings: 5,
        profilePicture: "/placeholder-user.jpg",
      },
      {
        id: 2,
        name: "honore chendjou",
        email: "chenxhenor@gmail.com",
        phone: "555-5678",
        bookings: 3,
        profilePicture: "/placeholder-user.jpg",
      },
      {
        id: 3,
        name: "kendra",
        email: "Kenmoekendra@icloud.com",
        phone: "555-9012",
        bookings: 8,
        profilePicture: "/placeholder-user.jpg",
      },
      
    ] 
      .filter((user) => {
        const searchValue = search.toLowerCase()
        return user.name.toLowerCase().includes(searchValue) || user.email.toLowerCase().includes(searchValue)
      })
   /*    .sort((a, b) => {
        if (sort.order === "asc") {
          return a [sort.key] > b[sort.key] ? 1 : -1
        } else {
          return a[sort.key] < b[sort.key] ? 1 : -1
        }
      }) */
      .slice((page - 1) * pageSize, page * pageSize)
  }, [search, sort, page, pageSize])
  const handleSearch = (e: { target: { value: SetStateAction<string> } }) => {
    setSearch(e.target.value)
    setPage(1)
  }
  const handleSort = (key: string) => {
    if (sort.key === key) {
      setSort({ key, order: sort.order === "asc" ? "desc" : "asc" })
    } else {
      setSort({ key, order: "asc" })
    }
    setPage(1)
  }
  const handlePageChange = (pageNumber: SetStateAction<number>) => {
    setPage(pageNumber)
  }
  const handleExport = () => {
    const csvData = users.map((user) => [user.name, user.email, user.phone, user.bookings])
    const csvContent = "data:text/csv;charset=utf-8," + csvData.map((row) => row.join(",")).join("\n")
    const encodedUri = encodeURI(csvContent)
    const link = document.createElement("a")
    link.setAttribute("href", encodedUri)
    link.setAttribute("download", "users.csv")
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Users</h1>
        <Button onClick={handleExport}>Export to CSV</Button>
      </div>
      <div className="flex items-center gap-4">
        <Input placeholder="Search by name or email" value={search} onChange={handleSearch} className="flex-1" />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="flex items-center gap-2">
              <ListOrderedIcon className="h-4 w-4" />
              Sort by
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuRadioGroup value={sort.key}>
              <DropdownMenuRadioItem value="name" onClick={() => handleSort("name")}>
                Name
                {sort.key === "name" && <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
              </DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="email" onClick={() => handleSort("email")}>
                Email
                {sort.key === "email" && <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
              </DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="phone" onClick={() => handleSort("phone")}>
                Phone
                {sort.key === "phone" && <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
              </DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="bookings" onClick={() => handleSort("bookings")}>
                Bookings
                {sort.key === "bookings" && <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
              </DropdownMenuRadioItem>
            </DropdownMenuRadioGroup>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Profile</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>Bookings</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>
                  <Avatar>
                    <AvatarImage src="/placeholder-user.jpg" />
                    <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                </TableCell>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.phone}</TableCell>
                <TableCell>{user.bookings}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button variant="ghost" size="icon">
                      <FilePenIcon className="h-4 w-4" />
                      <span className="sr-only">Edit</span>
                    </Button>
                    <Button variant="ghost" size="icon" className="text-red-500">
                      <BanIcon className="h-4 w-4" />
                      <span className="sr-only">Ban</span>
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      <div className="flex justify-end">
     {/*    <Pagination
          currentPage={page}
          totalPages={Math.ceil(users.length / pageSize)}
          onPageChange={handlePageChange}
        /> */}
      </div>
    </div>
  )
}

function BanIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="m4.9 4.9 14.2 14.2" />
    </svg>
  )
}


function FilePenIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}


function ListOrderedIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>
  )
}
